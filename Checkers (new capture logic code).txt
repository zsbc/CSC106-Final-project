var scene = "";
var COLUMS = 8;
var ROWS = 8;
var chips = [];
var redchips = [];
var bluechips = [];
var tiles = [];
var turn = ["RED", "BLUE"];

var drawBitmojiB = function(x1,y,h){

var drawBitmojihead=function(x1,y,h){
   noStroke();
fill(242, 232, 213);
ellipse(x1,y,1/2*h,45/100*h);//:face
fill(255, 255, 255);
ellipse(x1-1/10*h,y-5/100*h,1/10*h,1/10*h);//:left eye
ellipse(x1+1/10*h,y-5/100*h,1/10*h,1/10*h);//:right eye
fill(71, 46, 22);
ellipse(x1-1/10*h,y-5/100*h,3/100*h,3/100*h);//:left pupil
ellipse(x1+1/10*h,y-5/100*h,3/100*h,3/100*h);//:right pupil
fill(242, 232, 213);
ellipse(x1+27/100*h,y,1/10*h,15/100*h);//:right ear
ellipse(x1-27/100*h,y,1/10*h,15/100*h);//:right ear
stroke(0, 0, 0);
arc(x1,y+1/10*h,1/10*h,1/10*h,0,180);//:mouth
line(x1,y,x1+5/100*h,y+5/100*h);
line(x1+5/100*h,y+5/100*h,x1,y+5/100*h);//: nose
noStroke();
fill(71, 46, 22);
ellipse(x1,y-18/100*h,35/100*h,15/100*h);
rect(x1+12/100*h,y-18/100*h,12/100*h,12/100*h,10);
rect(x1-25/100*h,y-18/100*h,12/100*h,12/100*h,10);
rect(x1-22/100*h,y-22/100*h,12/100*h,12/100*h,10);//:hair
fill(82, 80, 82);
arc(x1,y-15/100*h,50/100*h,60/100*h,180,360);//:hat
fill(242, 232, 213);
rect(x1-15/100*h,y+20/100*h,30/100*h,11/100*h);//:neck 
}; 
    
var drawBitmojibody=function(x,y,h){

fill(0,0,0);
rect(x1-40/100*h,y+25/100*h,80/100*h,40/100*h);
fill(255, 255, 255);
triangle(x1-40/100*h,y+22/100*h,x1+40/100*h,y+22/100*h,x1,y+32/100*h);
fill(255,255,255);
textSize(15/100*h);
text("BS",x1-10/100*h,y+40/100*h,120/100*h,120/100*h);//:shirt
fill(242, 232, 213);
rect(x1-15/100*h,y+20/100*h,30/100*h,11/100*h);//:neck
};

drawBitmojihead(x1,y,h);
drawBitmojibody(x1,y,h);

};


/*************
MY BITMOJI
**************/
var drawBitmojiHead = function(bitmojiX, bitmojiY, bitmojiHeight) {
noStroke();
//HEAD
fill(235, 221, 164);
stroke(0, 0, 0);
strokeWeight(1);
ellipse(bitmojiX,bitmojiY,bitmojiHeight/150*73,bitmojiHeight/150*97);

//EYES

//--left
stroke(0, 0, 0);
fill(255, 255, 255);
ellipse(bitmojiX - (bitmojiHeight/150*13),bitmojiY - (bitmojiHeight/150 * 16),bitmojiHeight/150*16,bitmojiHeight/150*10);
noStroke();
fill(66, 36, 20);
ellipse(bitmojiX - (bitmojiHeight/150 * 13),bitmojiY - (bitmojiHeight/150 * 16),bitmojiHeight/150*8,bitmojiHeight/150*9);
fill(255, 255, 255);
ellipse(bitmojiX - (bitmojiHeight/150 * 14),bitmojiY - (bitmojiHeight/150 * 17),bitmojiHeight/150*2,bitmojiHeight/150*2);

//--right
stroke(0, 0, 0);
fill(255, 255, 255);
ellipse(bitmojiX - (bitmojiHeight/150*-13),bitmojiY - (bitmojiHeight/150 * 16),bitmojiHeight/150*16,bitmojiHeight/150*10);
noStroke();
fill(66, 36, 20);
ellipse(bitmojiX - (bitmojiHeight/150 * -13),bitmojiY - (bitmojiHeight/150 * 16),bitmojiHeight/150*8,bitmojiHeight/150*9);
fill(255, 255, 255);
ellipse(bitmojiX - (bitmojiHeight/150 * -12),bitmojiY - (bitmojiHeight/150 * 17),bitmojiHeight/150*2,bitmojiHeight/150*2);

//EYEBROWS
stroke(0, 0, 0);

//--left
line(bitmojiX - (bitmojiHeight/150 * 17),bitmojiY - (bitmojiHeight/150 * 26),bitmojiX - (bitmojiHeight/150 * 7),bitmojiY - (bitmojiHeight/150 * 26));
line(bitmojiX - (bitmojiHeight/150 * 22),bitmojiY - (bitmojiHeight/150 * 23),bitmojiX - (bitmojiHeight/150 * 15),bitmojiY - (bitmojiHeight/150 * 26));
//--right
line(bitmojiX + (bitmojiHeight/150 * 18),bitmojiY - (bitmojiHeight/150 * 25),bitmojiX + (bitmojiHeight/150 * 5),bitmojiY - (bitmojiHeight/150 * 26));
line(bitmojiX + (bitmojiHeight/150 * 22),bitmojiY - (bitmojiHeight/150 * 22),bitmojiX + (bitmojiHeight/150 * 16),bitmojiY - (bitmojiHeight/150 * 26));

//HAIR
fill(0,0,0);
ellipse(bitmojiX + (bitmojiHeight/150 * 0),bitmojiY - (bitmojiHeight/150 * 40),bitmojiHeight/150*25,bitmojiHeight/150*11);
ellipse(bitmojiX + (bitmojiHeight/150 * 15),bitmojiY - (bitmojiHeight/150 * 35),bitmojiHeight/150*23,bitmojiHeight/150*7);
ellipse(bitmojiX - (bitmojiHeight/150 * 18),bitmojiY - (bitmojiHeight/150 * 38),bitmojiHeight/150*28,bitmojiHeight/150*15);
ellipse(bitmojiX + (bitmojiHeight/150 * 18),bitmojiY - (bitmojiHeight/150 * 39),bitmojiHeight/150*24,bitmojiHeight/150*9);
ellipse(bitmojiX + (bitmojiHeight/150 * 1),bitmojiY - (bitmojiHeight/150 * 48),bitmojiHeight/150*22,bitmojiHeight/150*10);
ellipse(bitmojiX + (bitmojiHeight/150 * 15),bitmojiY - (bitmojiHeight/150 * 46),bitmojiHeight/150*29,bitmojiHeight/150*13);
ellipse(bitmojiX - (bitmojiHeight/150 * 15),bitmojiY - (bitmojiHeight/150 * 48),bitmojiHeight/150*22,bitmojiHeight/150*10);
ellipse(bitmojiX - (bitmojiHeight/150 * 28),bitmojiY - (bitmojiHeight/150 * 30),bitmojiHeight/150*5,bitmojiHeight/150*5);
ellipse(bitmojiX + (bitmojiHeight/150 * 26),bitmojiY - (bitmojiHeight/150 * 32),bitmojiHeight/150*5,bitmojiHeight/150*5);

//MOUTH
fill(232, 208, 208);
stroke(242, 9, 9);
strokeWeight(3);
arc(bitmojiX + (bitmojiHeight/150 * 0), bitmojiY + (bitmojiHeight/150 * 16), bitmojiHeight/150*35, bitmojiHeight/150*26, 47, 134);
noFill(); 
arc(bitmojiX + (bitmojiHeight/150 * 0), bitmojiY + (bitmojiHeight/150 * 29), bitmojiHeight/150*31, bitmojiHeight/150*-13, 39, 140);

//NOSE
fill(227, 212, 177);
stroke(224, 192, 143);
arc(bitmojiX + (bitmojiHeight/150 * 0), bitmojiY - (bitmojiHeight/150 * 12), bitmojiHeight/150*25, bitmojiHeight/150*55, 58, 119);

//EARS
fill(235,221,164);
stroke(0, 0, 0);
strokeWeight(1);
arc(bitmojiX - (bitmojiHeight/150 * 35),bitmojiY - (bitmojiHeight/150 * 5),bitmojiHeight/150*11,bitmojiHeight/150*-12,87, 269);
arc(bitmojiX + (bitmojiHeight/150 * 35),bitmojiY - (bitmojiHeight/150 * 5),bitmojiHeight/150*11,bitmojiHeight/150*12,253, 458);
};


var drawBitmojiBody = function(bitmojiX, bitmojiY, bitmojiHeight) {
noStroke();
//NECK
stroke(0,0,0);
fill(235, 221, 164);
rect(bitmojiX - (bitmojiHeight/150 * 14), bitmojiY + (bitmojiHeight/150 * 37), bitmojiHeight/150*27, bitmojiHeight/150*36, bitmojiHeight/150*100);
//--chain
fill(211,211,211);
ellipse(bitmojiX - (bitmojiHeight/150 * 10),bitmojiY + (bitmojiHeight/150 * 54),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX - (bitmojiHeight/150 * 8),bitmojiY + (bitmojiHeight/150 * 56),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX - (bitmojiHeight/150 * 5),bitmojiY + (bitmojiHeight/150 * 58),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX - (bitmojiHeight/150 * 3),bitmojiY + (bitmojiHeight/150 * 59),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX - (bitmojiHeight/150 * 1),bitmojiY + (bitmojiHeight/150 * 59),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX + (bitmojiHeight/150 * 1),bitmojiY + (bitmojiHeight/150 * 59),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX + (bitmojiHeight/150 * 3),bitmojiY + (bitmojiHeight/150 * 58),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX + (bitmojiHeight/150 * 6),bitmojiY + (bitmojiHeight/150 * 57),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX + (bitmojiHeight/150 * 8),bitmojiY + (bitmojiHeight/150 * 56),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX + (bitmojiHeight/150 * 10),bitmojiY + (bitmojiHeight/150 * 55),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX + (bitmojiHeight/150 * 12),bitmojiY + (bitmojiHeight/150 * 54),bitmojiHeight/150*3,bitmojiHeight/150*3);
ellipse(bitmojiX - (bitmojiHeight/150 * 12),bitmojiY + (bitmojiHeight/150 * 53),bitmojiHeight/150*3,bitmojiHeight/150*3);

//SHIRT
fill(175, 237, 113);
rect(bitmojiX - (bitmojiHeight/150 * 29),bitmojiY + (bitmojiHeight/150 * 63),bitmojiHeight/150*58,bitmojiHeight/150*28,bitmojiHeight/150*74);
//--initials
fill(255, 255, 255);
textSize(bitmojiHeight/150*20);
text("Z S", bitmojiX - (bitmojiHeight/150 * 15),bitmojiY + (bitmojiHeight/150 * 85));
};

/* */

var drawBitmojiZ = function(bitmojiX, bitmojiY, bitmojiHeight) {
    drawBitmojiBody(bitmojiX, bitmojiY, bitmojiHeight);
    drawBitmojiHead(bitmojiX, bitmojiY, bitmojiHeight);
};
/*************/

/*************
BUTTON OBJECT
**************/
//All of this code was copied from Khan Button Class
/*Use the Button object class from the Khan lessons. Instantiate a button called startButton, have it drawn on the opening scene screen. When it is clicked, have the scene change to the app. You must use the Khan button class.*/

//I modified/added properties to this Constructor
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label;
    this.buttonColor = config.buttonColor;
    this.textColor = config.textColor;
};

//I also modified the object functions below to fit my program
Button.prototype.draw = function() {
    fill(this.buttonColor);
    rect(this.x, this.y, this.width, this.height, 5);
    textSize(19);
    textAlign(LEFT, TOP);
    fill(this.textColor);
    text(this.label, this.x + this.width - 74, this.y + 14);
};

//Renamed this function to "isClicked" because its easier to remember
Button.prototype.isClicked = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};
/*************/

var printDebug = function(message) {
    println("[Checkers] " + message);
};

var isEven = function(number) {
    return number % 2 === 0;
};

var startButton = new Button(
    {
        x: 152,
        y: 216,
        width: 104,
        height: 48,
        label: "Start",
        textColor: color(74, 4, 4)
    }
);

var SelectedChip = function() {
    this.isSelected = false;
    this.array = null;
    this.index = null;
    this.color = null;
};

SelectedChip.prototype.setChip = function(array, index) {
    this.isSelected = true;
    this.array = array;
    this.index = index;
    this.color = array[index].color;
};

SelectedChip.prototype.getChip = function() {
    var array = this.array;
    var index = this.index;
    return array[index];
};

SelectedChip.prototype.unselectChip = function(tileNumber) {
    this.getChip().tileNumber = tileNumber;
    this.getChip().isSelected = false;
    this.isSelected = false;
    this.array = null;
};

var selectedChip = new SelectedChip();

var Chip = function(x, y) {
    this.x = x;
    this.y = y;
    this.isSelected = false;
    this.tileNumber = null;
    this.color = null;
    this.isKing = false;
};

Chip.prototype.getTile = function() {
    return tiles[this.tileNumber - 1];
};

Chip.prototype.isClicked = function() {
    return this.x - 18 < mouseX && this.x + 18 > mouseX && this.y + 18 > mouseY && this.y - 18 < mouseY;
};

Chip.prototype.destroy = function() {
    this.x = -10000;
    this.y = -10000;
};

Chip.prototype.draw = function() {
    if(this.isSelected) {
        fill(4, 255, 0);
    }
    else {
        if(this.color === "RED" ) {
            fill(252, 0, 0);
        }
        else if (this.color === "BLUE") {
            fill(119, 209, 219);
        }
    }
    ellipse(this.x, this.y, 35, 35);
    if(this.isKing) {
        textSize(20);
        fill(0, 0, 0);
        text("K", this.x - 6, this.y + 8);
    }
    
};

var Tile = function(x, y, number) {
    this.x = x;
    this.y = y;
    this.number = number;
    this.color = null;
    this.hasChip = false;
    this.chipColor = null;
};

Tile.prototype.getChip = function() {
    for(var i = 0; i < chips.length; i++) {
        var chip = chips[i];
        if(this.number === chip.tileNumber) {
            return chip;
        }
    }
    return null;
};
Tile.prototype.printInformation = function() {
    printDebug("Tile #" + this.number + " Information:");
    printDebug("x: " + this.x);
    printDebug("y: " + this.y);
    printDebug("color: " + this.color);
    printDebug("hasChip: " + this.hasChip);
    
};

Tile.prototype.isClicked = function() {
    return this.x - 25 < mouseX && this.x + 25 > mouseX && this.y + 25 > mouseY && this.y - 25 < mouseY;
};

Tile.prototype.draw = function() {
    if(this.color === "BLACK") {
        fill(0, 0, 0);
    }
    else if(this.color === "WHITE") {
        fill(255, 255, 255);
    }
    rect(this.x, this.y, 48,48);
    fill(209, 111, 209);
    textSize(20);
    text(this.number, this.x, this.y);
};

var addChipsToBoard = function() {
    for(var i = 0; i < 24; i++) {
        var tile = tiles[i];
        if(tile.color === "BLACK") {
            var chip = new Chip(tile.x, tile.y);
            chip.color = "RED";
            chip.tileNumber = tile.number;
            chip.draw();
            chips.push(chip);
            tile.hasChip = true;
            tile.chipColor = chip.color;
        }
    }
    
    for(var i = 40; i < 64; i++) {
        var tile = tiles[i];
        if(tile.color === "BLACK") {
            var chip = new Chip(tile.x, tile.y);
            chip.color = "BLUE";
            chip.tileNumber = tile.number;
            chip.draw();
            chips.push(chip);
            tile.hasChip = true;
            tile.chipColor = chip.color;
        }
    }
};
var updateChips = function() {
    for(var i = 0; i < chips.length; i++) {
        var chip = chips[i];
        chip.draw();
    }
};

var updateTurn = function() {
    var removedTurn = turn.shift();
    turn.push(removedTurn);
    printDebug(turn[0] + "'s turn");
};

var drawBoard = function() {
    rectMode(CENTER);
    ellipseMode(CENTER);
    
    var tileNumber = 0;
    for(var i = 0; i < ROWS; i++) {
        for(var j = 0; j < COLUMS; j++) {
            tileNumber++;
            
            var isEvenRow = i % 2 === 0;
            var isOddRow = i % 2 !== 0;
            var isEvenTile = tileNumber % 2 === 0;
            var isOddTile = tileNumber % 2 !== 0;
            
            var tileX = (49 * j) + 27;
            var tileY = (49 * i) + 30;
            
            var tile = new Tile(tileX, tileY, tileNumber);
            if(isEvenRow && isOddTile) {
                tile.color = "WHITE";
            }
            else if(isEvenRow && isEvenTile) {
                tile.color = "BLACK";
            }
            else if(isOddRow && isEvenTile) {
                tile.color = "WHITE";
            }
            else if(isOddRow && isOddTile) {
                tile.color = "BLACK";
            }
            tiles.push(tile);
            tile.draw();
        }
    }
    updateChips();
};


var drawStartScreen = function() {
    scene = "start_screen";
    background(74, 4, 4);
    textSize(57);
    text("Checkers", 78, 100);
    textSize(25);
    text("Click below to play", 94, 179);
    drawBitmojiB(106, 321, 100);
    drawBitmojiZ(298,324,100);
    startButton.draw();
};

var removeChipFromBoard = function(tileChipWasOn, chip) {
        tileChipWasOn.hasChip = false;
        tileChipWasOn.chipColor = null;
        chip.x = -10000;
        chip.y = -10000;
    };

var getTilesDiagonallyRight = function(chipColor, oldTile, newTile) {
    var allRightDiagonalTiles = [];
    var oldTileNumber = oldTile.number;
    if(chipColor === "BLUE" ){
        for(var i = oldTileNumber; i >= 0; i--) {
            var tile = tiles[i];
            if(tile.color === "BLACK" && (oldTileNumber - tile.number) % 7 === 0) {
                if(tile.number === oldTileNumber) {
                    continue;
                }
                allRightDiagonalTiles.push(tile);
            }
        }
    }
    else if(chipColor === "RED") {
        for(var i = oldTileNumber; i <= 56; i++) {
            var tile = tiles[i];
            if(tile.color === "BLACK" && (oldTileNumber - tile.number) % 9 === 0) {
                if(tile.number === oldTileNumber) {
                    continue;
                }
                allRightDiagonalTiles.push(tile);
            }
        }
    }
    return allRightDiagonalTiles;
};

var getTilesDiagonallyLeft = function(chipColor, oldTile, newTile) {
    var allLeftDiagonalTiles = [];
    var oldTileNumber = oldTile.number;
    if(chipColor === "BLUE") {
        for(var i = oldTileNumber; i >= 0; i--) {
            var tile = tiles[i];
            if(tile.color === "BLACK" && (oldTileNumber - tile.number) % 9 === 0) {
                if(tile.number === oldTileNumber) {
                    continue;
                }
                allLeftDiagonalTiles.push(tile);
            }
        }
    }
    else if(chipColor === "RED") {
        for(var i = oldTileNumber; i <= 56; i++) {
            var tile = tiles[i];
            if(tile.color === "BLACK" && (oldTileNumber - tile.number) % 7 === 0) {
                if(tile.number === oldTileNumber) {
                    continue;
                }
                allLeftDiagonalTiles.push(tile);
            }
        }
    }
    return allLeftDiagonalTiles;
};

var detectIfCapture = function(oldTile, newTile, rightDiagonalTiles, leftDiagonalTiles) {
    
    //Right capture logic
    //1 Chip Capture
    if(rightDiagonalTiles.length >= 1) {
        if(rightDiagonalTiles[0].hasChip && rightDiagonalTiles[0].chipColor !== oldTile.chipColor && !rightDiagonalTiles[1].hasChip && newTile.number === rightDiagonalTiles[1].number) {
            removeChipFromBoard(rightDiagonalTiles[0], rightDiagonalTiles[0].getChip());
            return true;
        }
    }
    //2 Chip Capture
    if(rightDiagonalTiles.length >= 3) {
        if(rightDiagonalTiles[0].hasChip && rightDiagonalTiles[0].chipColor !== oldTile.chipColor && !rightDiagonalTiles[1].hasChip && rightDiagonalTiles[2].hasChip && rightDiagonalTiles[2].chipColor !== oldTile.chipColor && !rightDiagonalTiles[3].hasChip && newTile.number === rightDiagonalTiles[3].number) {
            removeChipFromBoard(rightDiagonalTiles[0], rightDiagonalTiles[0].getChip());
            removeChipFromBoard(rightDiagonalTiles[2], rightDiagonalTiles[2].getChip());
            return true;
        }
    }
    
    //Left capture logic
    //1 Chip Capture
    if(leftDiagonalTiles.length >= 1) {
        if(leftDiagonalTiles[0].hasChip && leftDiagonalTiles[0].chipColor !== oldTile.chipColor && !leftDiagonalTiles[1].hasChip && newTile.number === leftDiagonalTiles[1].number) {
            removeChipFromBoard(leftDiagonalTiles[0], leftDiagonalTiles[0].getChip());
            return true;
        }
    }
    //2 Chip Capture
    if(leftDiagonalTiles.length >= 3) {
        if(leftDiagonalTiles[0].hasChip && leftDiagonalTiles[0].chipColor !== oldTile.chipColor && !leftDiagonalTiles[1].hasChip && leftDiagonalTiles[2].hasChip && leftDiagonalTiles[2].chipColor !== oldTile.chipColor && !leftDiagonalTiles[3].hasChip && newTile.number === leftDiagonalTiles[3].number) {
            removeChipFromBoard(leftDiagonalTiles[0], leftDiagonalTiles[0].getChip());
            removeChipFromBoard(leftDiagonalTiles[2], leftDiagonalTiles[2].getChip());
            return true;
        }
    }
};

mouseClicked = function() {
    /*if(scene === "start_screen") {
        if(!startButton.isClicked()) {
            return;
        }
        
        scene = "game_screen";
        
    }*/

    
    //println("X: " + mouseX + ", Y: " + mouseY);
    
    //Logic if a chip on the board is selected (to move a chip)
    if(selectedChip.isSelected) {
        var chipSelected = selectedChip.getChip();
        for(var i = 0; i < tiles.length; i++) {
            var newTile = tiles[i];
            var newTileNumber = i + 1;
            if(newTile.isClicked()) {
                var oldTile = chipSelected.getTile();
                if(newTile === oldTile) {
                    printDebug("Un-Selecting " + chipSelected.color + " Chip (#" + chipSelected.tileNumber + ")");
                    selectedChip.unselectChip(newTileNumber);
                    return;
                }
                if(newTile.hasChip === true) {
                    printDebug("You cannot do this!");
                    return;
                }
                if(newTile.color === "WHITE") {
                    printDebug("Cannot move your chip to a white tile!");
                    return;
                }
                
                var newTileY = newTile.y;
                var oldTileY = oldTile.y;
                
                if(chipSelected.color === "RED") {
                    if(newTileY <= oldTileY) {
                        printDebug("You can only move red chips down!");
                        return;
                    }
                    if((newTile.number - oldTile.number) % 9 !== 0 && (newTile.number - oldTile.number) % 7 !== 0) {
                        printDebug("You can only move your red chips diagonally");
                        return;
                    }
                    var rightDiagonalTiles = getTilesDiagonallyRight(chipSelected.color, oldTile, newTile);
                    var leftDiagonalTiles = getTilesDiagonallyLeft(chipSelected.color, oldTile, newTile);
                    var hasCaptured = detectIfCapture(oldTile, newTile, rightDiagonalTiles, leftDiagonalTiles);
                    if(!hasCaptured && oldTile.y - newTile.y > 49) {
                        printDebug("You can only move 1 spot at a time!");
                        return;
                    }
                }
                else if(chipSelected.color === "BLUE") {
                    if(newTileY >= oldTileY) {
                        printDebug("You can only move blue chip up!");
                        return;
                    }
                    if((newTile.number - oldTile.number) % 9 !== 0 && (newTile.number - oldTile.number) % 7 !== 0) {
                        printDebug("You can only move your blue chip diagonally");
                        return;
                    }
                    var rightDiagonalTiles = getTilesDiagonallyRight(chipSelected.color, oldTile, newTile);
                    var leftDiagonalTiles = getTilesDiagonallyLeft(chipSelected.color, oldTile, newTile);
                    var hasCaptured = detectIfCapture(oldTile, newTile, rightDiagonalTiles, leftDiagonalTiles);
                    if(!hasCaptured && oldTile.y - newTile.y > 49) {
                        printDebug("You can only move 1 spot at a time!");
                        return;
                    }
                }
                selectedChip.unselectChip(newTileNumber);
                chipSelected.x = newTile.x;
                chipSelected.y = newTile.y;
                oldTile.hasChip = false;
                oldTile.chipColor = null;
                newTile.hasChip = true;
                newTile.chipColor = chipSelected.color;
                
                printDebug("Moving " + chipSelected.color + " chip to tile #" + newTile.number);
                updateTurn();
                
                //printDebug("-----------");
                //oldTile.printInformation();
                //printDebug("-----------");
                //newTile.printInformation();
                //printDebug("-----------");
                return;
            }
        }
    }
    
    //Logic if a chip is not selected (to select a chip)
    for(var i = 0; i < chips.length; i++) {
        var chip = chips[i];
        if(turn[0] !== chip.color) {
            continue;
        }
        if(!chip.isClicked()) {
            continue;
        }
        
        if(chip.isSelected === false) {
            printDebug("Selecting " + chip.color + " Chip (#" + chip.tileNumber + ")");
            chip.isSelected = true;
            selectedChip.setChip(chips,i);
        }
    }
};
draw = function() {
    /*if(scene !== "game_screen") {
        return;
    }*/
    drawBoard();
};
//drawStartScreen();
//drawBoard();

drawBoard();
addChipsToBoard();
printDebug(turn[0] + "'s turn");